"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6674],{6466:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=t(4848),n=t(8453);const i={},a="Secure Delete",l={id:"sep/Features/secure-delete",title:"Secure Delete",description:"Method Name: SecureDelete",source:"@site/docs/sep/Features/secure-delete.md",sourceDirName:"sep/Features",slug:"/sep/Features/secure-delete",permalink:"/docs/sep/Features/secure-delete",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sep/Features/secure-delete.md",tags:[],version:"current",frontMatter:{},sidebar:"sep",previous:{title:"Password Library",permalink:"/docs/sep/Features/password-library"}},o={},c=[{value:"Method Name: SecureDelete",id:"method-name-securedelete",level:2},{value:"Summary:",id:"summary",level:3},{value:"Syntax:",id:"syntax",level:3},{value:"Parameters:",id:"parameters",level:3},{value:"Description:",id:"description",level:3},{value:"Returns",id:"returns",level:3},{value:"Exceptions:",id:"exceptions",level:3},{value:"Remarks:",id:"remarks",level:3}];function d(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h1,{id:"secure-delete",children:"Secure Delete"}),"\n",(0,r.jsx)(s.h2,{id:"method-name-securedelete",children:"Method Name: SecureDelete"}),"\n",(0,r.jsx)(s.h3,{id:"summary",children:"Summary:"}),"\n",(0,r.jsx)(s.p,{children:"This method securely deletes a file by overwriting it with random data multiple times, then renaming and finally deleting the file."}),"\n",(0,r.jsx)(s.h3,{id:"syntax",children:"Syntax:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:"public static void SecureDelete(string filePath, int passes)\n"})}),"\n",(0,r.jsx)(s.h3,{id:"parameters",children:"Parameters:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"filePath"}),"\xa0(string): The path of the file to be securely deleted."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"passes"}),"\xa0(int): The number of times the file should be overwritten with random data."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"description",children:"Description:"}),"\n",(0,r.jsxs)(s.p,{children:["The\xa0",(0,r.jsx)(s.code,{children:"SecureDelete"}),"\xa0method performs the following steps:"]}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsx)(s.li,{children:"Checks if the file exists."}),"\n",(0,r.jsx)(s.li,{children:"If it does, it sets the file\u2019s attributes to normal in case it\u2019s read-only."}),"\n",(0,r.jsx)(s.li,{children:"Calculates the total number of sectors in the file."}),"\n",(0,r.jsx)(s.li,{children:"Creates a dummy buffer the same size as the sector."}),"\n",(0,r.jsx)(s.li,{children:"Creates a cryptographic Random Number Generator, which is used to fill the file with random data."}),"\n",(0,r.jsx)(s.li,{children:"Opens a FileStream to the file."}),"\n",(0,r.jsx)(s.li,{children:"Writes random data to each sector of the file for a specified number of passes."}),"\n",(0,r.jsx)(s.li,{children:"After overwriting, it closes the FileStream."}),"\n",(0,r.jsx)(s.li,{children:"As an extra measure, it calculates a random filename to rename the file to before deleting it."}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"If an exception occurs during reading or writing, it prints out an error message and closes all open streams."}),"\n",(0,r.jsx)(s.h3,{id:"returns",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:"This method does not return a value."}),"\n",(0,r.jsx)(s.h3,{id:"exceptions",children:"Exceptions:"}),"\n",(0,r.jsxs)(s.p,{children:["This method catches and handles general\xa0",(0,r.jsx)(s.code,{children:"Exception"}),". If an exception is caught, an error message is printed to the console."]}),"\n",(0,r.jsx)(s.h3,{id:"remarks",children:"Remarks:"}),"\n",(0,r.jsx)(s.p,{children:"This method should securely erase most files, making them unrecoverable with standard tools. However, please note that this might not work on all types of storage media due to hardware-level features such as wear-levelling on SSDs. Also, remember that this method can be time-consuming for large files or when a large number of passes is specified, as it needs to overwrite every single sector in the file multiple times."}),"\n",(0,r.jsx)(s.p,{children:'The "Wipe File" (Secure Deletion) form has got a minimum & maximum possible value for the number of passes it should make, now. This means that the form cannot make any number of passes fewer than 3, or greater than 100.'})]})}function h(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>a,x:()=>l});var r=t(6540);const n={},i=r.createContext(n);function a(e){const s=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),r.createElement(i.Provider,{value:s},e.children)}}}]);